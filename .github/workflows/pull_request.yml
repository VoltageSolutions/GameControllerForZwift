name: CI Workflow

on:
  pull_request:
    branches:
      - '**'

permissions:
  contents: read
  checks: write
  security-events: write

jobs:
  test:
    name: Run Tests with Coverage
    runs-on: windows-latest

    strategy:
      matrix:
        task: [group1, group2, group3, group4] # Define the groups to run in parallel

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Run Task Groups
      run: |
        if [ "${{ matrix.task }}" == "group1" ]; then
          echo "Running Group 1..."
          dotnet test --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=TestResults.trx" || true
          dorny-test-reporter --path "**/TestResults.trx" --reporter dotnet-trx --fail-on-error true
        elif [ "${{ matrix.task }}" == "group2" ]; then
          echo "Running Group 2..."
          dotnet tool install --global dotnet-reportgenerator-globaltool
          dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory:TestResults || true
          reportgenerator -reports:TestResults/**/coverage.cobertura.xml -targetdir:TestResults/CoverageReport -reporttypes:"HtmlInline_AzurePipelines;Cobertura"
          codecov --files ${{ github.workspace }}\TestResults\CoverageReport\Cobertura.xml --token ${{ secrets.CODECOV_TOKEN }}
        elif [ "${{ matrix.task }}" == "group3" ]; then
          echo "Running Group 3..."
          dotnet codeql analyze --output codeql-results.sarif
        elif [ "${{ matrix.task }}" == "group4" ]; then
          echo "Running Group 4..."
          version=$(Select-String -Path src/Presentation/GameControllerForZwift/GameControllerForZwift.csproj -Pattern '<Version>(.*?)</Version>').Matches.Groups[1].Value
          echo "Extracted version: $version"
          tag_exists=$(git tag --list | grep "v$version" || true)
          if [ -n "$tag_exists" ]; then
            echo "Tag already exists."
          else
            echo "New version tag."
          fi
        fi
