name: CI Workflow

on:
  pull_request:
    branches:
      - '**'

permissions:
  contents: read
  checks: write
  security-events: write

jobs:
  test:
    name: Run Tests with Coverage
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: 'csharp'

    - name: Build solution
      id: build
      run: dotnet build --configuration Release --no-restore

        - name: Run Groups in Parallel
      shell: pwsh
      run: |
        # Group 1: Run TRX tests and report results
        Start-Job -ScriptBlock {
          try {
            dotnet test --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=TestResults.trx"
            dorny-test-reporter --path "**/TestResults.trx" --reporter dotnet-trx --fail-on-error true
          } catch {
            Write-Host "Group 1 failed, but continuing."
          }
        }

        # Group 2: Coverage reports
        Start-Job -ScriptBlock {
          try {
            dotnet tool install --global dotnet-reportgenerator-globaltool
            dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory:TestResults
            reportgenerator -reports:TestResults/**/coverage.cobertura.xml -targetdir:TestResults/CoverageReport -reporttypes:"HtmlInline_AzurePipelines;Cobertura"
            codecov --files "${{ github.workspace }}\TestResults\CoverageReport\Cobertura.xml" --token "${{ secrets.CODECOV_TOKEN }}"
          } catch {
            Write-Host "Group 2 failed, but continuing."
          }
        }

        # Group 3: Perform CodeQL analysis
        Start-Job -ScriptBlock {
          try {
            dotnet codeql analyze --output codeql-results.sarif
          } catch {
            Write-Host "Group 3 failed, but continuing."
          }
        }

        # Group 4: Version extraction and tag check
        Start-Job -ScriptBlock {
          try {
            $version = (Select-String -Path src/Presentation/GameControllerForZwift/GameControllerForZwift.csproj -Pattern '<Version>(.*?)</Version>').Matches.Groups[1].Value
            Write-Host "Extracted version: $version"
            $tagExists = git tag --list | Where-Object { $_ -eq "v$version" }
            if ($tagExists) {
              Write-Host "Tag already exists: v$version"
            } else {
              Write-Host "New version tag: v$version"
            }
          } catch {
            Write-Host "Group 4 failed, but continuing."
          }
        }

        # Wait for all background jobs to complete
        Get-Job | Wait-Job
        Get-Job | Receive-Job
