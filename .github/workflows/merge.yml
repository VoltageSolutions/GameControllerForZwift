name: CD Workflow

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  # -------------------------
  # 1. Publish Job (Framework-Dependent Build)
  # -------------------------
  publish-framework:
    name: Publish Release
    runs-on: windows-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: 'csharp'

    - name: Publish Framework-Dependent Build
      run: |
        mkdir ./artifacts/framework-dependent
        dotnet publish GameControllerForZwift_TestsExcluded.slnf -c Release -o ./artifacts/framework-dependent
        Get-ChildItem ./artifacts/framework-dependent -Recurse | Where-Object { $_.Extension -ne ".pdb" } | Compress-Archive -DestinationPath ./artifacts/gamecontrollerforzwift.zip

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Save Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: framework-dependent-build
        path: ./artifacts/gamecontrollerforzwift.zip

    - name: Extract version from .csproj 
      id: get_version 
      shell: pwsh 
      run:  | 
        $version = (Select-String -Path src/Presentation/GameControllerForZwift/GameControllerForZwift.csproj -Pattern '<Version>(.*?)</Version>').Matches.Groups[1].Value 
        echo "version=$version" >> $env:GITHUB_OUTPUT

    # Self-Contained Build
    # - name: Publish Self-Contained Build
    #   run: |
    #     mkdir ./artifacts/self-contained
    #     dotnet publish GameControllerForZwift_TestsExcluded.slnf -c Release -r win-x64 --self-contained true -o ./artifacts/self-contained
    #     Compress-Archive -Path ./artifacts/self-contained/* -DestinationPath ./artifacts/gamecontrollerforzwift_with_runtime.zip

  # -------------------------
  # 2. Create Release and Upload Artifacts
  # -------------------------
  release:
    name: Deploy Release to GitHub
    runs-on: ubuntu-latest
    needs: publish-framework  # Ensure the publish job completes before creating release

    steps:
      
    - name: Download Build Artifact
      uses: actions/download-artifact@v3
      with:
        name: framework-dependent-build
        path: ./artifacts

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v${{ needs.publish-framework.outputs.version }}"
        release_name: "Release v${{ needs.publish-framework.outputs.version }}"
        draft: false
        prerelease: false

    - name: Upload Framework-Dependent Build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/gamecontrollerforzwift.zip
        asset_name: gamecontrollerforzwift.zip
        asset_content_type: application/zip

    # Upload Self-Contained Build
    # - name: Upload Self-Contained Build
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./artifacts/gamecontrollerforzwift_with_runtime.zip
    #     asset_name: gamecontrollerforzwift_with_runtime.zip
    #     asset_content_type: application/zip